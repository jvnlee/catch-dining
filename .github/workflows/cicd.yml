name: CI/CD

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'

      - name: Create application-prod.yml
        run: |
          cd ./src/main/resources
          echo "${{ secrets.PROD_CONFIG }}" >> ./application-prod.yml

      - name: Create init.sql
        run: |
          echo "${{ secrets.INIT_WRITE_DB_SQL }}" >> ./init-write-db.sql
          echo "${{ secrets.INIT_READ_DB_SQL }}" >> ./init-read-db.sql

      - name: Import FCM credentials
        run: |
          cd ./src/main/resources
          mkdir firebase
          echo '${{ secrets.FCM_CREDENTIALS }}' >> ./firebase/credentials.json

      - name: Build with Gradle
        run: ./gradlew build

      - name: Build app image and push to DockerHub
        run: |
          docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_PASSWORD }}
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/catch-dining-app .
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/catch-dining-app

      - name: Transfer docker-compose.prod.yml to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_PEM }}
          source: "docker-compose.prod.yml"
          target: "~/"

      - name: Transfer init-write-db.sql to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_PEM }}
          source: "init-write-db.sql"
          target: "~/"

      - name: Transfer init-read-db.sql to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_PEM }}
          source: "init-read-db.sql"
          target: "~/"

      - name: Execute Docker Compose
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_PEM }}
          script: |
            DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }} \
            DB_ROOT_PASSWORD=${{ secrets.DB_ROOT_PASSWORD }} \
            docker-compose -f docker-compose.prod.yml up -d --build
            docker image prune -f